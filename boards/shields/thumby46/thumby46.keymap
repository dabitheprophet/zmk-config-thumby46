#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1500  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // default: 10
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors/mouse_keys.dtsi>

#define DEFAULT       0
#define NUMPAD        1
#define LOWER         2
#define RAISE         3
#define FUNCTION      4
#define MOUSE         5
#define CTRL_GUI_SWAP 6

/* Key positions (0-indexed) derived from your default_layer bindings grid */
#define POS_LSHIFT   33  /* row4 left:  LALT(30) LGUI(31) RAISE(32) LSHIFT(33) */
#define POS_RSHIFT   34  /* row4 right: RSHIFT(34) RAISE(35) RGUI(36) RALT(37) */
#define POS_RAISE_R  35  /* right-side RAISE on row4 */
#define POS_LOWER_R  44  /* right-side LOWER on row5: ... RET(42) SPACE(43) LOWER(44) RCTRL(45) */
#define POS_LGUI     31
#define POS_LCTRL    38  /* row5 left: LCTRL(38) LOWER(39) TAB(40) ESC(41) */
#define POS_RGUI     36
#define POS_RCTRL    45
#define POS_TAB      40  /* row5 left: ... TAB(40) ESC(41) */
#define POS_SPACE    43  /* row5 right: RET(42) SPACE(43) LOWER(44) RCTRL(45) */

#define COMBO_TIMEOUT 70

/ {
        combos {
            compatible = "zmk,combos";

            /* LShift + Tab â†’ toggle Mouse 
            combo_lshift_tab_mouse_toggle {
                timeout-ms = <COMBO_TIMEOUT>;
                key-positions = <POS_LSHIFT POS_TAB>;
                bindings = <&tog MOUSE>;
            };*/

            /* RShift + Space â†’ toggle Mouse
            combo_rshift_space_mouse_toggle {
                timeout-ms = <COMBO_TIMEOUT>;
                key-positions = <POS_RSHIFT POS_SPACE>;
                bindings = <&tog MOUSE>;
            }; */

            // Right RAISE + Right LOWER together â†’ toggle Numpad layer
            combo_right_raise_lower_numpad_toggle {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <POS_RAISE_R POS_LOWER_R>;
            bindings = <&tog NUMPAD>;
            };

            // LGUI + LCTRL held together â†’ momentary Function layer
            combo_fn_left {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <POS_LGUI POS_LCTRL>;
            bindings = <&mo FUNCTION>;    // acts while both are held
            };

            // RGUI + RCTRL held together â†’ momentary Function layer 
            combo_fn_right {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <POS_RGUI POS_RCTRL>;
            bindings = <&mo FUNCTION>;
            };
        };
        behaviors {
            /* Left Shift: hold = LSHFT, single tap = no-op, double tap = CapsLock 
            td_lshift_caps: td_lshift_caps {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;      
            bindings = <&kp LSHFT>, 
                        <&kp CAPS>;        
            };*/

            /* Right Shift: hold = RSHFT, single tap = no-op, double tap = CapsLock 
            td_rshift_caps: td_rshift_caps {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp RSHFT>,
                        <&kp CAPS>;
            };*/
            
            /* Left Alt: hold = LALT, tap = no-op, double tap = toggle Ctrlâ‡„Gui swap (both sides) */
            td_lalt_swap: td_lalt_swap {
                compatible = "zmk,behavior-tap-dance";
                #binding-cells = <0>;
                tapping-term-ms = <200>;
                bindings = <&kp LALT>,   /* hold = Alt, tap = no-op */
                        <&tog CTRL_GUI_SWAP>;
            };

            /* Right Alt: same, also toggles the same swap layer */
            td_ralt_swap: td_ralt_swap {
                compatible = "zmk,behavior-tap-dance";
                #binding-cells = <0>;
                tapping-term-ms = <200>;
                bindings = <&kp RALT>,
                        <&tog CTRL_GUI_SWAP>;
            };
            layer_hold_tap: layer_hold_tap {
                compatible = "zmk,behavior-hold-tap";
                #binding-cells = <2>;

                flavor = "hold-preferred";   /* ðŸ‘ˆ ensures "chording" = hold */
                tapping-term-ms = <200>;

                bindings = <&mo>, <&kp>;
            };
            /* Left Shift: hold = LSHFT, tap = Z */
            kp_hold_tap: kp_hold_tap {
                compatible = "zmk,behavior-hold-tap";
                #binding-cells = <2>;

                flavor = "hold-preferred";
                tapping-term-ms = <200>;        /* adjust to comfort */

                bindings = <&kp>, <&kp>;
            };
            /* Left Shift: hold = LSHFT, tap = Z */
            bt_clear: bt_clear {
                compatible = "zmk,behavior-hold-tap";
                #binding-cells = <1>;

                flavor = "hold-preferred";
                tapping-term-ms = <300>;        /* adjust to comfort */

                bindings = <&bt>, <&none>;
            };
        };
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -------------------------------------------------------------------
// |  Q  |  W  |  E  |  R  |  T  |     |  Y  |  U  |  I  |  O  |  P  |
// |  A  |  S  |  D  |  F  |  G  |     |  H  |  J  |  K  |  L  |  ;  |
// |  Z  |  X  |  C  |  V  |  B  |     |  N  |  M  |  ,  |  .  |  /  |
// | ALT | GUI |HIGH |SHFT |     |     |     |SHFT |HIGH | GUI | ALT |
// |     |CNTL | LOW | TAB | ESC |     | ENT | SPC | LOW |CNTL |     |
                        bindings = <  
   &kp Q          &kp W      &kp E      &kp R      &kp T          &kp Y      &kp U            &kp I      &kp O       &kp P   
   &kp A          &kp S      &kp D      &kp F      &kp G          &kp H      &kp J            &kp K      &kp L       &kp SEMI
   &kp_hold_tap LSHFT Z          &kp X      &kp C      &kp V      &kp B          &kp N      &kp M            &kp COMMA  &kp DOT     &kp_hold_tap RSHFT FSLH
   &td_lalt_swap  &kp LGUI   &mo RAISE  &layer_hold_tap NUMPAD TAB                      &layer_hold_tap LOWER SPACE  &mo RAISE  &kp RGUI    &td_ralt_swap
                  &kp LCTRL  &mo LOWER  &kp CAPS    &kp ESC        &kp RET    &tog NUMPAD    &mo LOWER  &kp RCTRL
                        >;
                };

                numpad_layer {
// -------------------------------------------------------------------
// |     |     |     |     |     |     |  /  |  7  |  8  |  9  |  -  |
// |     |     |     |     |     |     |  *  |  4  |  5  |  6  |  +  |
// |     |     |     |     |     |     |  0  |  1  |  2  |  3  | ent |
// |     |     |     |     |     |     |     |     |     |     |     |
// |     |     |     |     |     |     |     |     |     |     |     |
                        bindings = <  
   &trans  &trans  &trans  &trans  &trans         &kp FSLH   &kp N7  &kp N8  &kp N9  &kp MINUS
   &trans  &trans  &trans  &trans  &trans         &kp ASTRK  &kp N4  &kp N5  &kp N6  &kp PLUS
   &trans  &trans  &trans  &trans  &trans         &kp N0     &kp N1  &kp N2  &kp N3  &kp RET
   &trans  &trans  &trans  &trans                            &trans  &trans  &trans  &trans
           &trans  &trans  &trans  &trans         &trans     &trans  &trans  &trans          
                        >;
                };

                lower_layer {
// -------------------------------------------------------------------
// | BT1 |BTCLR|BRIDN|BRIUP|NONE |     |back |fwrd | up  |home |end  |
// | BT2 |MUTE | VUP | VDN |NONE |     |pgdn |left |down |right|pgup |
// | BT3 |PREV |PLAY |NEXT |NONE |     |scrdn|scrup|bkspc| del | ins |
// |     |     |     |     |     |     |     |     |     |     |     |
// |     |     |     |     |     |     |     |     |     |     |     |
                        bindings = <  
   &bt BT_SEL 0  &bt_clear BT_CLR  &kp C_BRI_DEC  &kp C_BRI_INC  &none         &mkp MB4        &mkp MB5      &kp UP    &kp HOME   &kp END   
   &bt BT_SEL 1  &kp C_MUTE  &kp C_VOL_DN   &kp C_VOL_UP   &none         &kp PG_DN       &kp LEFT      &kp DOWN  &kp RIGHT  &kp PG_UP
   &bt BT_SEL 2  &kp C_PREV  &kp C_PP       &kp C_NEXT     &none         &msc MOVE_DOWN  &msc MOVE_UP  &kp BSPC  &kp DEL    &kp INS
   &trans        &trans      &trans         &trans                                       &trans        &trans    &trans     &trans
                 &trans      &trans         &trans         &trans        &trans          &trans        &trans    &trans           
                        >;
                };

                higher_layer {
// -------------------------------------------------------------------
// |  1  |  2  |  3  |  4  |  5  |     |  6  |  7  |  8  |  9  |  0  |
// |  !  |  @  |  #  |  $  |  %  |     |  ^  |  &  |  *  |LPAR |RPAR |
// | UND | MIN |PLUS |EQUAL|GRAVE|     |  \  |  "  |  '  |LBKT |RBKT |
// |     |     |     |     |     |     |     |     |     |     |     |
// |     |     |     |     |     |     |     |     |     |     |     |
                        bindings = <  
   &kp N1     &kp N2     &kp N3    &kp N4      &kp N5         &kp N6     &kp N7     &kp N8     &kp N9    &kp N0   
   &kp EXCL   &kp AT     &kp HASH  &kp DOLLAR  &kp PRCNT      &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR
   &kp UNDER  &kp MINUS  &kp PLUS  &kp EQUAL   &kp GRAVE      &kp BSLH   &kp DQT    &kp SQT    &kp LBKT  &kp RBKT
   &trans     &trans     &trans    &trans                                &trans     &trans     &trans    &trans
              &trans     &trans    &trans      &trans         &trans     &trans     &trans     &trans           
                        >;
                };

                fn_layer {
// -------------------------------------------------------------------
// | F1  | F2  | F3  | F4  | F5  |     | F6  | F7  | F8  | F9  | F10 |
// |     |     |     |     | F11 |     | F12 |     |     |     |     |
// |     |     |     |     |     |     |     |     |     |     |     |
// |     |     |     |     |     |     |     |     |     |     |     |
// |     |     |     |     |     |     |     |     |     |     |     |
    bindings = <
    &kp F1   &kp F2   &kp F3   &kp F4   &kp F5                     &kp F6   &kp F7   &kp F8   &kp F9   &kp F10
    &none    &none    &none    &none    &kp F11                    &kp F12  &none    &none    &none     &none
    &none    &none    &none    &none    &none                      &none    &none    &none    &none     &none
    &trans   &trans   &trans   &trans                                       &trans   &trans   &trans    &trans
             &trans   &trans   &trans   &trans                    &trans    &trans   &trans   &trans
                        >;
                };

                //mouse_layer {
// -------------------------------------------------------------------
// |     |     |     |     |     |     |back |fwrd | up  |     |     |
// |     |     |     |     |     |     |mclk |left |down |right|     |
// |     |     |     |     |     |     |scdwn|scup |scrit|sclft|     |
// |     |     |     |     |     |     |     |     |     |     |     |
// |     |     |     |     |     |     |     |     |     |     |     |
                    /*    bindings = <  
   &trans  &trans  &trans  &trans  &trans         &mkp MB4        &mkp MB5        &mmv MOVE_UP    &none            &none   
   &trans  &trans  &trans  &trans  &trans         &mkp MCLK       &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &none
   &trans  &trans  &trans  &trans  &trans         &msc MOVE_DOWN  &msc MOVE_UP    &msc MOVE_LEFT  &msc MOVE_RIGHT  &none
   &trans  &trans  &trans  &trans                                 &mkp RCLK       &trans          &trans           &trans
           &trans  &trans  &trans  &trans         &trans          &mkp LCLK       &trans          &trans           
                        >;
                };*/

                ctrl_gui_swap_layer {
                // -------------------------------------------------------------------
                // Swaps LGUIâ†”LCTRL and RGUIâ†”RCTRL. All other keys are transparent.
                    bindings = <
    &trans &trans     &trans &trans &trans      &trans &trans &trans &trans     &trans
    &trans &trans     &trans &trans &trans      &trans &trans &trans &trans     &trans
    &trans &trans     &trans &trans &trans      &trans &trans &trans &trans     &trans
    &trans &kp LCTRL  &trans &trans                    &trans &trans &kp RCTRL  &trans
           &kp LGUI   &trans &trans &trans      &trans &trans &trans &kp RGUI
                    >;
                };




        };
};

